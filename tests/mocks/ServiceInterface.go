// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	model "github.com/kartalenka7/project_gophermart/internal/model"
)

// ServiceInterface is an autogenerated mock type for the ServiceInterface type
type ServiceInterface struct {
	mock.Mock
}

type ServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceInterface) EXPECT() *ServiceInterface_Expecter {
	return &ServiceInterface_Expecter{mock: &_m.Mock}
}

// AddUserOrder provides a mock function with given fields: ctx, number, login
func (_m *ServiceInterface) AddUserOrder(ctx context.Context, number string, login string) error {
	ret := _m.Called(ctx, number, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, number, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInterface_AddUserOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserOrder'
type ServiceInterface_AddUserOrder_Call struct {
	*mock.Call
}

// AddUserOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - number string
//  - login string
func (_e *ServiceInterface_Expecter) AddUserOrder(ctx interface{}, number interface{}, login interface{}) *ServiceInterface_AddUserOrder_Call {
	return &ServiceInterface_AddUserOrder_Call{Call: _e.mock.On("AddUserOrder", ctx, number, login)}
}

func (_c *ServiceInterface_AddUserOrder_Call) Run(run func(ctx context.Context, number string, login string)) *ServiceInterface_AddUserOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceInterface_AddUserOrder_Call) Return(_a0 error) *ServiceInterface_AddUserOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

// AuthUser provides a mock function with given fields: ctx, user
func (_m *ServiceInterface) AuthUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInterface_AuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthUser'
type ServiceInterface_AuthUser_Call struct {
	*mock.Call
}

// AuthUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *ServiceInterface_Expecter) AuthUser(ctx interface{}, user interface{}) *ServiceInterface_AuthUser_Call {
	return &ServiceInterface_AuthUser_Call{Call: _e.mock.On("AuthUser", ctx, user)}
}

func (_c *ServiceInterface_AuthUser_Call) Run(run func(ctx context.Context, user model.User)) *ServiceInterface_AuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *ServiceInterface_AuthUser_Call) Return(_a0 error) *ServiceInterface_AuthUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, login
func (_m *ServiceInterface) GetBalance(ctx context.Context, login string) (model.Balance, error) {
	ret := _m.Called(ctx, login)

	var r0 model.Balance
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Balance); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(model.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInterface_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type ServiceInterface_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *ServiceInterface_Expecter) GetBalance(ctx interface{}, login interface{}) *ServiceInterface_GetBalance_Call {
	return &ServiceInterface_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, login)}
}

func (_c *ServiceInterface_GetBalance_Call) Run(run func(ctx context.Context, login string)) *ServiceInterface_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceInterface_GetBalance_Call) Return(_a0 model.Balance, _a1 error) *ServiceInterface_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUserOrders provides a mock function with given fields: ctx, login
func (_m *ServiceInterface) GetUserOrders(ctx context.Context, login string) ([]model.OrdersResponse, error) {
	ret := _m.Called(ctx, login)

	var r0 []model.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OrdersResponse); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInterface_GetUserOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserOrders'
type ServiceInterface_GetUserOrders_Call struct {
	*mock.Call
}

// GetUserOrders is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *ServiceInterface_Expecter) GetUserOrders(ctx interface{}, login interface{}) *ServiceInterface_GetUserOrders_Call {
	return &ServiceInterface_GetUserOrders_Call{Call: _e.mock.On("GetUserOrders", ctx, login)}
}

func (_c *ServiceInterface_GetUserOrders_Call) Run(run func(ctx context.Context, login string)) *ServiceInterface_GetUserOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceInterface_GetUserOrders_Call) Return(_a0 []model.OrdersResponse, _a1 error) *ServiceInterface_GetUserOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithdrawals provides a mock function with given fields: ctx, login
func (_m *ServiceInterface) GetWithdrawals(ctx context.Context, login string) ([]model.OrderWithdraw, error) {
	ret := _m.Called(ctx, login)

	var r0 []model.OrderWithdraw
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OrderWithdraw); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderWithdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInterface_GetWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawals'
type ServiceInterface_GetWithdrawals_Call struct {
	*mock.Call
}

// GetWithdrawals is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *ServiceInterface_Expecter) GetWithdrawals(ctx interface{}, login interface{}) *ServiceInterface_GetWithdrawals_Call {
	return &ServiceInterface_GetWithdrawals_Call{Call: _e.mock.On("GetWithdrawals", ctx, login)}
}

func (_c *ServiceInterface_GetWithdrawals_Call) Run(run func(ctx context.Context, login string)) *ServiceInterface_GetWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ServiceInterface_GetWithdrawals_Call) Return(_a0 []model.OrderWithdraw, _a1 error) *ServiceInterface_GetWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ParseUserCredentials provides a mock function with given fields: r
func (_m *ServiceInterface) ParseUserCredentials(r *http.Request) (model.User, error) {
	ret := _m.Called(r)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(*http.Request) model.User); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceInterface_ParseUserCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseUserCredentials'
type ServiceInterface_ParseUserCredentials_Call struct {
	*mock.Call
}

// ParseUserCredentials is a helper method to define mock.On call
//  - r *http.Request
func (_e *ServiceInterface_Expecter) ParseUserCredentials(r interface{}) *ServiceInterface_ParseUserCredentials_Call {
	return &ServiceInterface_ParseUserCredentials_Call{Call: _e.mock.On("ParseUserCredentials", r)}
}

func (_c *ServiceInterface_ParseUserCredentials_Call) Run(run func(r *http.Request)) *ServiceInterface_ParseUserCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *ServiceInterface_ParseUserCredentials_Call) Return(_a0 model.User, _a1 error) *ServiceInterface_ParseUserCredentials_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RgstrUser provides a mock function with given fields: ctx, user
func (_m *ServiceInterface) RgstrUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInterface_RgstrUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RgstrUser'
type ServiceInterface_RgstrUser_Call struct {
	*mock.Call
}

// RgstrUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *ServiceInterface_Expecter) RgstrUser(ctx interface{}, user interface{}) *ServiceInterface_RgstrUser_Call {
	return &ServiceInterface_RgstrUser_Call{Call: _e.mock.On("RgstrUser", ctx, user)}
}

func (_c *ServiceInterface_RgstrUser_Call) Run(run func(ctx context.Context, user model.User)) *ServiceInterface_RgstrUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *ServiceInterface_RgstrUser_Call) Return(_a0 error) *ServiceInterface_RgstrUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// WriteWithdraw provides a mock function with given fields: ctx, withdraw, login
func (_m *ServiceInterface) WriteWithdraw(ctx context.Context, withdraw model.OrderWithdraw, login string) error {
	ret := _m.Called(ctx, withdraw, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderWithdraw, string) error); ok {
		r0 = rf(ctx, withdraw, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceInterface_WriteWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteWithdraw'
type ServiceInterface_WriteWithdraw_Call struct {
	*mock.Call
}

// WriteWithdraw is a helper method to define mock.On call
//  - ctx context.Context
//  - withdraw model.OrderWithdraw
//  - login string
func (_e *ServiceInterface_Expecter) WriteWithdraw(ctx interface{}, withdraw interface{}, login interface{}) *ServiceInterface_WriteWithdraw_Call {
	return &ServiceInterface_WriteWithdraw_Call{Call: _e.mock.On("WriteWithdraw", ctx, withdraw, login)}
}

func (_c *ServiceInterface_WriteWithdraw_Call) Run(run func(ctx context.Context, withdraw model.OrderWithdraw, login string)) *ServiceInterface_WriteWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderWithdraw), args[2].(string))
	})
	return _c
}

func (_c *ServiceInterface_WriteWithdraw_Call) Return(_a0 error) *ServiceInterface_WriteWithdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewServiceInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewServiceInterface creates a new instance of ServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewServiceInterface(t mockConstructorTestingTNewServiceInterface) *ServiceInterface {
	mock := &ServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
