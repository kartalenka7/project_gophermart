// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/kartalenka7/project_gophermart/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

type Storer_Expecter struct {
	mock *mock.Mock
}

func (_m *Storer) EXPECT() *Storer_Expecter {
	return &Storer_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: ctx, number, login
func (_m *Storer) AddOrder(ctx context.Context, number string, login string) error {
	ret := _m.Called(ctx, number, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, number, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type Storer_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//  - ctx context.Context
//  - number string
//  - login string
func (_e *Storer_Expecter) AddOrder(ctx interface{}, number interface{}, login interface{}) *Storer_AddOrder_Call {
	return &Storer_AddOrder_Call{Call: _e.mock.On("AddOrder", ctx, number, login)}
}

func (_c *Storer_AddOrder_Call) Run(run func(ctx context.Context, number string, login string)) *Storer_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Storer_AddOrder_Call) Return(_a0 error) *Storer_AddOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

// AddUser provides a mock function with given fields: ctx, user
func (_m *Storer) AddUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_AddUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUser'
type Storer_AddUser_Call struct {
	*mock.Call
}

// AddUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *Storer_Expecter) AddUser(ctx interface{}, user interface{}) *Storer_AddUser_Call {
	return &Storer_AddUser_Call{Call: _e.mock.On("AddUser", ctx, user)}
}

func (_c *Storer_AddUser_Call) Run(run func(ctx context.Context, user model.User)) *Storer_AddUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *Storer_AddUser_Call) Return(_a0 error) *Storer_AddUser_Call {
	_c.Call.Return(_a0)
	return _c
}

// AuthUser provides a mock function with given fields: ctx, user
func (_m *Storer) AuthUser(ctx context.Context, user model.User) (string, error) {
	ret := _m.Called(ctx, user)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, model.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_AuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthUser'
type Storer_AuthUser_Call struct {
	*mock.Call
}

// AuthUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user model.User
func (_e *Storer_Expecter) AuthUser(ctx interface{}, user interface{}) *Storer_AuthUser_Call {
	return &Storer_AuthUser_Call{Call: _e.mock.On("AuthUser", ctx, user)}
}

func (_c *Storer_AuthUser_Call) Run(run func(ctx context.Context, user model.User)) *Storer_AuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.User))
	})
	return _c
}

func (_c *Storer_AuthUser_Call) Return(_a0 string, _a1 error) *Storer_AuthUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CalculateBalance provides a mock function with given fields: ctx, login
func (_m *Storer) CalculateBalance(ctx context.Context, login string) (int32, error) {
	ret := _m.Called(ctx, login)

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context, string) int32); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(int32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_CalculateBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateBalance'
type Storer_CalculateBalance_Call struct {
	*mock.Call
}

// CalculateBalance is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *Storer_Expecter) CalculateBalance(ctx interface{}, login interface{}) *Storer_CalculateBalance_Call {
	return &Storer_CalculateBalance_Call{Call: _e.mock.On("CalculateBalance", ctx, login)}
}

func (_c *Storer_CalculateBalance_Call) Run(run func(ctx context.Context, login string)) *Storer_CalculateBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storer_CalculateBalance_Call) Return(_a0 int32, _a1 error) *Storer_CalculateBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, login
func (_m *Storer) GetBalance(ctx context.Context, login string) (model.Balance, error) {
	ret := _m.Called(ctx, login)

	var r0 model.Balance
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Balance); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(model.Balance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type Storer_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *Storer_Expecter) GetBalance(ctx interface{}, login interface{}) *Storer_GetBalance_Call {
	return &Storer_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, login)}
}

func (_c *Storer_GetBalance_Call) Run(run func(ctx context.Context, login string)) *Storer_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storer_GetBalance_Call) Return(_a0 model.Balance, _a1 error) *Storer_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOrders provides a mock function with given fields: ctx, login
func (_m *Storer) GetOrders(ctx context.Context, login string) ([]model.OrdersResponse, error) {
	ret := _m.Called(ctx, login)

	var r0 []model.OrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OrdersResponse); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type Storer_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *Storer_Expecter) GetOrders(ctx interface{}, login interface{}) *Storer_GetOrders_Call {
	return &Storer_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx, login)}
}

func (_c *Storer_GetOrders_Call) Run(run func(ctx context.Context, login string)) *Storer_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storer_GetOrders_Call) Return(_a0 []model.OrdersResponse, _a1 error) *Storer_GetOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWithdrawals provides a mock function with given fields: ctx, login
func (_m *Storer) GetWithdrawals(ctx context.Context, login string) ([]model.OrderWithdraw, error) {
	ret := _m.Called(ctx, login)

	var r0 []model.OrderWithdraw
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.OrderWithdraw); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderWithdraw)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storer_GetWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithdrawals'
type Storer_GetWithdrawals_Call struct {
	*mock.Call
}

// GetWithdrawals is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *Storer_Expecter) GetWithdrawals(ctx interface{}, login interface{}) *Storer_GetWithdrawals_Call {
	return &Storer_GetWithdrawals_Call{Call: _e.mock.On("GetWithdrawals", ctx, login)}
}

func (_c *Storer_GetWithdrawals_Call) Run(run func(ctx context.Context, login string)) *Storer_GetWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storer_GetWithdrawals_Call) Return(_a0 []model.OrderWithdraw, _a1 error) *Storer_GetWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// WriteWithdraw provides a mock function with given fields: ctx, withdraw, login
func (_m *Storer) WriteWithdraw(ctx context.Context, withdraw model.OrderWithdraw, login string) error {
	ret := _m.Called(ctx, withdraw, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderWithdraw, string) error); ok {
		r0 = rf(ctx, withdraw, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storer_WriteWithdraw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteWithdraw'
type Storer_WriteWithdraw_Call struct {
	*mock.Call
}

// WriteWithdraw is a helper method to define mock.On call
//  - ctx context.Context
//  - withdraw model.OrderWithdraw
//  - login string
func (_e *Storer_Expecter) WriteWithdraw(ctx interface{}, withdraw interface{}, login interface{}) *Storer_WriteWithdraw_Call {
	return &Storer_WriteWithdraw_Call{Call: _e.mock.On("WriteWithdraw", ctx, withdraw, login)}
}

func (_c *Storer_WriteWithdraw_Call) Run(run func(ctx context.Context, withdraw model.OrderWithdraw, login string)) *Storer_WriteWithdraw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.OrderWithdraw), args[2].(string))
	})
	return _c
}

func (_c *Storer_WriteWithdraw_Call) Return(_a0 error) *Storer_WriteWithdraw_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewStorer interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorer(t mockConstructorTestingTNewStorer) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
